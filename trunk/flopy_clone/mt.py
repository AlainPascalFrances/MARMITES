from mbase import basemodel, package
from mtadv import mtadv
from mtbtn import mtbtn
from mtdsp import mtdsp
from mtgcg import mtgcg
from mtphc import mtphc
from mtrct import mtrct
from mtssm import mtssm
from mttob import mttob

class mtlist(package):
    'List package class'
    def __init__(self, model, extension='list'):
        package.__init__(self, model, extension, 'LIST', 7) # Call ancestor's init to set self.parent, extension, name and unit number
        #self.parent.add_package(self) This package is not added to the base model so that it is not included in get_name_file_entries()
    def __repr__( self ):
        return 'List package class'
    def write_file(self):
    	# Not implemented for list class
    	return

class mt3dms(basemodel):
    'MT3DMS base class'
    def __init__(self, modelname = 'mt3dmstest', namefile_ext = 'nam', modflowmodel=None):
        basemodel.__init__(self, modelname, namefile_ext)
        self.heading = '# Name file for MT3DMS, generated by Flopy.'
        self.__mf = modflowmodel
        self.lst = mtlist(self)
        self.__adv = None
        self.__dsp = None
        self.__gcg = None
        self.__rct = None
        self.__ssm = None
    def __repr__( self ):
        return 'MT3DMS model'
    def getadv(self):
        if (self.__adv == None):
            for p in (self.packagelist):
                if isinstance(p, mtadv):
                    self.__adv = p
        return self.__adv
    def getdsp(self):
        if (self.__dsp == None):
            for p in (self.packagelist):
                if isinstance(p, mtdsp):
                    self.__dsp = p
        return self.__dsp
    def getgcg(self):
        if (self.__gcg == None):
            for p in (self.packagelist):
                if isinstance(p, mtgcg):
                    self.__gcg = p
        return self.__gcg
    def getmf(self):
        return self.__mf
    def getrct(self):
        if (self.__rct == None):
            for p in (self.packagelist):
                if isinstance(p, mtrct):
                    self.__rct = p
        return self.__rct
    def getssm(self):
        if (self.__ssm == None):
            for p in (self.packagelist):
                if isinstance(p, mtssm):
                    self.__ssm = p
        return self.__ssm
    adv = property(getadv) # Property has no setter, so read-only
    dsp = property(getdsp) # Property has no setter, so read-only
    gcg = property(getgcg) # Property has no setter, so read-only
    mf = property(getmf) # Property has no setter, so read-only
    rct = property(getrct) # Property has no setter, so read-only
    ssm = property(getssm) # Property has no setter, so read-only
    def write_name_file(self):
        f_nam = open( self.namefile, 'w' )
        f_nam.write('%s\n' % (self.heading) )
        f_nam.write('%s\t%3i\t%s\n' % (self.lst.name[0], self.lst.unit_number[0], self.lst.file_name[0]))
        f_nam.write('%s' % self.get_name_file_entries())
        f_nam.close()
