from numpy import empty
from mbase import package

class mtrct(package):
    'Chemical reaction package class'
    def __init__(self, model, isothm=0, ireact=0, igetsc=1, rhob=1.8, prsity2=0.1, srconc=0.0, sp1=0.0, sp2=0.0, rc1=0.0, rc2=0.0, extension='rct'):
        package.__init__(self, model, extension, 'RCT', 36) # Call ancestor's init to set self.parent, extension, name and unit number
        nrow, ncol, nlay, nper = self.parent.mf.nrow_ncol_nlay_nper
        self.heading1 = '# RCT for MT3DMS, generated by Flopy.'
        self.isothm = isothm
        self.ireact = ireact
        self.irctop = 2 # All reaction variables are specified as 3-D arrays on a cell-by-cell basis
        self.igetsc = igetsc
        # First create arrays so that they have the correct size
        self.rhob = empty((nrow, ncol, nlay))
        self.prsity2 = empty((nrow, ncol, nlay))
        self.srconc = empty((nrow, ncol, nlay))
        self.sp1 = empty((nrow, ncol, nlay))
        self.sp2 = empty((nrow, ncol, nlay))
        self.rc1 = empty((nrow, ncol, nlay))
        self.rc2 = empty((nrow, ncol, nlay))
        # Set values of all parameters
        self.assignarray(self.rhob , rhob )
        self.assignarray(self.prsity2 , prsity2 )
        self.assignarray(self.srconc , srconc )
        self.assignarray(self.sp1 , sp1 )
        self.assignarray(self.sp2 , sp2 )
        self.assignarray(self.rc1 , rc1 )
        self.assignarray(self.rc2 , rc2 )
        self.parent.add_package(self)
    def __repr__( self ):
        return 'Chemical reaction package class'
    def write_file(self):
        nrow, ncol, nlay, nper = self.parent.mf.nrow_ncol_nlay_nper
        # Open file for writing
        f_rct = open(self.file_name[0], 'w')
        f_rct.write('%10i%10i%10i%10i\n' % (self.isothm, self.ireact, self.irctop, self.igetsc))
        if (self.isothm in [1, 2, 3, 4, 6]):
            self.parent.write_array( f_rct, self.rhob, self.unit_number[0], True, 13, -ncol, 'Bulk density for Layer')
        if (self.isothm in [5, 6]):
            self.parent.write_array( f_rct, self.prsity2, self.unit_number[0], True, 13, -ncol, 'Immobile porosity for Layer')
        if (self.igetsc > 0):
            self.parent.write_array( f_rct, self.srconc, self.unit_number[0], True, 13, -ncol, 'Sorbed/immobile starting concentration for Layer')
        if (self.isothm > 0):
            self.parent.write_array( f_rct, self.sp1, self.unit_number[0], True, 13, -ncol, 'First sorption parameter for Layer')
        if (self.isothm > 0):
            self.parent.write_array( f_rct, self.sp2, self.unit_number[0], True, 13, -ncol, 'Second sorption parameter for Layer')
        if (self.ireact > 0):
            self.parent.write_array( f_rct, self.rc1, self.unit_number[0], True, 13, -ncol, 'First order reaction rate for liquid phase for Layer')
        if (self.ireact > 0):
            self.parent.write_array( f_rct, self.rc2, self.unit_number[0], True, 13, -ncol, 'First order reaction rate for sorbed phase for Layer')
        f_rct.close()

