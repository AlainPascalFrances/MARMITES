from numpy import empty
from mbase import package

class mtbtn(package):
    'Basic transport package class'
    def __init__(self, model, ncomp=1, mcomp=1, tunit='D', lunit='M', munit='KG', prsity=0.30, icbund=1, sconc=0.0, \
                 cinact=1e30, thkmin=0.01, ifmtcn=0, ifmtnp=0, ifmtrf=0, ifmtdp=0, savucn=True, timprs=None, obs=None,
                 nprobs=1, chkmas=True, nprmas=1, dt0=0, mxstrn=50000, ttsmult=1.0, ttsmax=0, species_names = [], extension='btn'):
        package.__init__(self, model, extension, 'BTN', 31) # Call ancestor's init to set self.parent, extension, name and unit number
        nrow, ncol, nlay, nper = self.parent.mf.nrow_ncol_nlay_nper
        self.heading1 = '# BTN for MT3DMS, generated by Flopy.'
        self.heading2 = '#'
        self.mcomp = mcomp
        self.tunit = tunit
        self.lunit = lunit
        self.munit = munit
        self.cinact = cinact
        self.thkmin = thkmin
        self.ifmtcn = ifmtcn
        self.ifmtnp = ifmtnp
        self.ifmtrf = ifmtrf
        self.ifmtdp = ifmtdp
        self.savucn = savucn
        self.timprs = timprs
        self.obs = obs
        self.nprobs = nprobs
        self.chkmas = chkmas
        self.nprmas = nprmas
        self.species_names = species_names
        # First create arrays so that they have the correct size
        self.dt0 = empty(nper)
        self.mxstrn = empty(nper, 'int')
        self.ttsmult = empty(nper)
        self.ttsmax = empty(nper)
        self.prsity = empty((nrow, ncol, nlay)) # Porosity
        self.icbund = empty((nrow, ncol, nlay), dtype='int32') # ICBUND array
        # Set values of all parameters
        self.assignarray( self.prsity, prsity )
        self.assignarray( self.icbund, icbund )
        # Starting concentrations
        self.ncomp = 0
        self.sconc = []
        if (sconc != None):
            for s in sconc:
                new_sconc = empty((nrow, ncol, nlay))
                self.assignarray( new_sconc, s )
                self.sconc.append(new_sconc)
                self.ncomp = self.ncomp + 1
        print self.ncomp
        #assert self.ncomp >= self.mcomp, 'NCOMP must be equal to or larger than MCOMP'
        self.assignarray( self.dt0, dt0 )
        self.assignarray( self.mxstrn, mxstrn )
        self.assignarray( self.ttsmult, ttsmult )
        self.assignarray( self.ttsmax, ttsmax )
        self.parent.add_package(self)
    def __repr__( self ):
        return 'Basic transport package class'
    def write_file(self):
        nrow, ncol, nlay, nper = self.parent.mf.nrow_ncol_nlay_nper
        mfdis = self.parent.mf.get_package('DIS')
        # Open file for writing
        f_btn = open(self.file_name[0], 'w')
        f_btn.write('%s\n%s\n' % (self.heading1, self.heading2))
        f_btn.write('%10i%10i%10i%10i%10i%10i\n' % (nlay, nrow, ncol, nper, self.ncomp, self.mcomp))
        f_btn.write('%4s%4s%4s\n' % (self.tunit, self.lunit, self.munit))
        if (self.parent.adv != None):
            f_btn.write('%2s' % ('T'))
        else:
            f_btn.write('%2s' % ('F'))
        if (self.parent.dsp != None):
            f_btn.write('%2s' % ('T'))
        else:
            f_btn.write('%2s' % ('F'))
        if (self.parent.ssm != None):
            f_btn.write('%2s' % ('T'))
        else:
            f_btn.write('%2s' % ('F'))
        if (self.parent.rct != None):
            f_btn.write('%2s' % ('T'))
        else:
            f_btn.write('%2s' % ('F'))
        if (self.parent.gcg != None):
            f_btn.write('%2s' % ('T'))
        else:
            f_btn.write('%2s' % ('F'))
        f_btn.write('\n')
        self.parent.write_array( f_btn, self.parent.mf.get_package('BCF6').laycon, self.unit_number[0], False, 2, -40)
        self.parent.write_array( f_btn, mfdis.delr, self.unit_number[0], True, 13, -40, 'DELR(NCOL)')
        self.parent.write_array( f_btn, mfdis.delc, self.unit_number[0], True, 13, -40, 'DELC(NROW)')
        self.parent.write_array( f_btn, mfdis.top, self.unit_number[0], True, 13, -40, 'HTOP(NCOL,NROW); Top of the first layer')
        self.parent.write_array( f_btn, mfdis.thickness, self.unit_number[0], True, 13, -40, 'Thickness of layer')
        self.parent.write_array( f_btn, self.prsity, self.unit_number[0], True, 13, -40, 'Effective porosity of layer')
        # ICBUND array
        self.parent.write_array( f_btn, self.icbund, self.unit_number[0], True, 4, -5, 'ICBUND Array for Layer')
        # Starting concentrations
        for s in range(len(self.sconc)):
            if (len(self.species_names) > s):
                comment = 'Starting concentrations of species %d (%s) for Layer' % (s + 1, self.species_names[s])
            else:
                comment = 'Starting concentrations of species %d for Layer' % (s + 1)
            self.parent.write_array( f_btn, self.sconc[s], self.unit_number[0], True, 13, -40, comment)
        f_btn.write('%10.0E%10.4f\n' % (self.cinact, self.thkmin))
        f_btn.write('%10i%10i%10i%10i' % (self.ifmtcn, self.ifmtnp, self.ifmtrf, self.ifmtdp))
        if (self.savucn == True):
            ss = 'T'
        else:
            ss = 'F'
        f_btn.write('%10s\n' % (ss))
        # NPRS
        if (self.timprs == None):
            f_btn.write('%10i\n' % (0))
        else:
            f_btn.write('%10i\n' % (len(self.timprs)))
            self.parent.write_array( f_btn, self.timprs, self.unit_number[0], False, 10, 8, '' )
        # OBS
        if (self.obs == None):
            f_btn.write('%10i%10i\n' % (0, self.nprobs))
        else:
            nobs = self.obs.shape[0]
            f_btn.write('%10i%10i\n' % (nobs, self.nprobs))
            for r in range(nobs):
                f_btn.write('%10i%10i%10i\n' %(self.obs[r, 0], self.obs[r, 1], self.obs[r, 2]))
        # CHKMAS, NPRMAS
        if (self.chkmas == True):
            ss = 'T'
        else:
            ss = 'F'
        f_btn.write('%10s%10i\n' % (ss, self.nprmas))
        # PERLEN, NSTP, TSMULT
        for t in range(nper):
            f_btn.write('%10f%10d%10f\n' % (mfdis.perlen[t], mfdis.nstp[t], mfdis.tsmult[t]))
            f_btn.write('%10f%10d%10f%10f\n' % (self.dt0[t], self.mxstrn[t], self.ttsmult[t], self.ttsmax[t]))
        f_btn.close()

