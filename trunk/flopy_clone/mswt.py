from mbase import basemodel, package
from mswtvdf import mswtvdf

class mswtlist(package):
    'List package class'
    def __init__(self, model, extension='list'):
        package.__init__(self, model, extension, 'LIST', 7) # Call ancestor's init to set self.parent, extension, name and unit number
        #self.parent.add_package(self) This package is not added to the base model so that it is not included in get_name_file_entries()
    def __repr__( self ):
        return 'List package class'
    def write_file(self):
    	# Not implemented for list class
    	return

class mswt(basemodel):
    'SEAWAT base class'
    def __init__(self, modelname = 'mt3dmstest', namefile_ext = 'nam', modflowmodel=None, mt3dmsmodel=None):
        basemodel.__init__(self, modelname, namefile_ext)
        self.heading = '# Name file for MT3DMS, generated by Flopy.'
        self.__mf = modflowmodel
        self.__mt = mt3dmsmodel
        self.lst = mswtlist(self)
        self.__vdf = None
    def __repr__( self ):
        return 'SEAWAT model'
    def getvdf(self):
        if (self.__vdf == None):
            for p in (self.packagelist):
                if isinstance(p, mswtvdf):
                    self.__vdf = p
        return self.__vdf
    def getmf(self):
        return self.__mf
    def getmt(self):
        return self.__mt
    mf = property(getmf) # Property has no setter, so read-only
    mt = property(getmt) # Property has no setter, so read-only
    vdf = property(getvdf) # Property has no setter, so read-only
    def write_name_file(self):
        f_nam = open( self.namefile, 'w' )
        f_nam.write('%s\n' % (self.heading) )
        f_nam.write('%s\t%3i\t%s\n' % (self.lst.name[0], self.lst.unit_number[0], self.lst.file_name[0]))
        f_nam.write('%s\n' % ('# Flow') )
        f_nam.write('%s' % self.__mf.get_name_file_entries())
        f_nam.write('%s\n' % ('# Transport') )
        f_nam.write('%s' % self.__mt.get_name_file_entries())
        f_nam.write('%s\n' % ('# Variable density flow') )
        f_nam.write('%s' % self.get_name_file_entries())
        f_nam.close()
